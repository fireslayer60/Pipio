version: "3.8"
services:
  postgres:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: pipeforge
      POSTGRES_USER: pipeforge
      POSTGRES_PASSWORD: secret
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - pipio-net
    # ADDED: Health check to ensure postgres is ready before dependents start
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pipeforge -d pipeforge"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    restart: always
    networks:
      - pipio-net
    # ADDED: Health check to ensure redis is ready before dependents start
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    restart: always
    depends_on:
      # CHANGED: Wait for the services to be healthy, not just started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/pipeforge
      - SPRING_DATASOURCE_USERNAME=pipeforge  
      - SPRING_DATASOURCE_PASSWORD=secret
      - SPRING_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    volumes:
      - C:/Users/krish/pipio/secrets:/mnt/secrets
    networks:
      - pipio-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    restart: always
    depends_on:
      # CHANGED: Wait for the services to be healthy, not just started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/pipeforge
      - SPRING_DATASOURCE_USERNAME=pipeforge  
      - SPRING_DATASOURCE_PASSWORD=secret
      - SPRING_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - C:/Users/krish/pipio/secrets:/mnt/secrets
    networks:
      - pipio-net

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    restart: always
    ports:
      - "18080:80"
    depends_on:
      # CHANGED: Wait for the api service to be healthy (optional but good practice)
      api:
        condition: service_healthy
    networks:
      - pipio-net

networks:
  pipio-net:
    driver: bridge

volumes:
  pgdata:
